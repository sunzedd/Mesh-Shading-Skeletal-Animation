#version 450
#extension GL_NV_mesh_shader : require
#extension GL_ARB_separate_shader_objects : require
#extension GL_NV_gpu_shader5 : enable

layout(local_size_x=1, local_size_y=1, local_size_z=1) in;
layout(triangles, max_vertices=64, max_primitives=126) out;


// -------------------Output data ----------------------------
out gl_PerVertex
{
    vec4 gl_Position;
} gl_stupid;

out gl_MeshPerVertexNV 
{
     vec4 gl_Position;
} gl_MeshVerticesNV[];

out uint gl_PrimitiveCountNV;
out uint gl_PrimitiveIndicesNV[];


// --------------------- Structures ------------------------------
struct Vertex
{
    //vec3 position;
    float x;
    float y;
    float z;
};

struct Meshlet
{
    uint32_t vertices[64];      
    uint32_t indices[126 * 3];
    uint32_t triangleCount;
    uint32_t vertexCount;
};


// --------------------- SSBO buffers -----------------------------
layout(binding = 0, shared) readonly buffer vertices_ssbo
{
    Vertex vertices[];
} vertex_buffer;

layout(binding = 2, shared) readonly buffer meshlets_ssbo
{
	Meshlet meshlets[];
} meshlet_buffer;


// --------------------- Uniforms ---------------------------------
//uniform mat4 u_M_matrix;
//uniform mat4 u_VP_matrix;
uniform mat4 u_MVP_matrix;



void main()
{
    uint meshlet_index = gl_WorkGroupID.x;
    uint thread_index = gl_LocalInvocationID.x;

    Meshlet meshlet = meshlet_buffer.meshlets[meshlet_index];

    // We have only one thread
    for (uint i = 0; i < meshlet.vertexCount; i++)
    {   
        uint global_vertex_index = meshlet.vertices[i];
        vec3 position3 = vec3(vertex_buffer.vertices[global_vertex_index].x, vertex_buffer.vertices[global_vertex_index].y, vertex_buffer.vertices[global_vertex_index].z);
        //vec4 position = vec4(vertex_buffer.vertices[global_vertex_index].position, 1.0);
        
        vec4 position = u_MVP_matrix * vec4(position3.xyz, 1.0);

        gl_MeshVerticesNV[i].gl_Position = position;
    }

    for (uint i = 0; i < uint(meshlet.triangleCount) * 3; i++)
    {
        uint global_vertex_index = meshlet.vertices[meshlet.indices[i]];
        gl_PrimitiveIndicesNV[i] = global_vertex_index;
        //gl_PrimitiveIndicesNV[i] = meshlet.indices[i];
    }

    gl_PrimitiveCountNV = meshlet.triangleCount;
}