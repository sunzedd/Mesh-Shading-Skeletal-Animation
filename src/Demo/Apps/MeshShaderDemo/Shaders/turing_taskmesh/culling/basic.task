#version 450
#extension GL_NV_mesh_shader : require
#extension GL_ARB_separate_shader_objects : require
#extension GL_NV_gpu_shader5 : enable

// extensions for culling
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_ballot : enable
//

#define THREAD_COUNT 32
#define CULL 1

layout(local_size_x=THREAD_COUNT, local_size_y=1, local_size_z=1) in;


taskNV out Task 
{
    uint meshletIndices[32];
} TaskShader_Output;


struct Meshlet
{
    float cone[4];
    uint32_t vertices[64];      
    uint8_t indices[126 * 3];
    uint8_t triangleCount;
    uint8_t vertexCount;
};


uniform mat4 u_M_matrix;
uniform mat4 u_V_matrix;
uniform vec3 u_view_direction;
uniform vec3 u_camera_position;
uniform bool u_do_cluster_culling;


layout(binding = 1, shared) readonly buffer meshlets_ssbo
{
	Meshlet meshlets[];
} meshlet_buffer;


bool coneCull(vec4 cone, vec3 viewDir, mat4 modelMatrix)
{
    vec4 coneN = u_V_matrix * u_M_matrix * vec4(cone.xyz, 0.0);
    return dot(coneN.xyz, vec3(0, 0, -1)) > cone.w;

    //vec4 coneNormal = modelMatrix * vec4(cone.xyz, 0.0);
    //return dot(cone.xyz, vec3(0, 0, -1.0)) > cone.w;
    //return dot(normalize(coneNormal.xyz), normalize(viewDir)) > cone.w;
    //return false;
}

bool coneCull_(vec4 cone, vec3 cameraPos, mat4 modelMatrix)
{
    vec4 coneNormal4 = modelMatrix * vec4(cone.xyz, 1.0);
    vec3 coneNormal = normalize(coneNormal4.xyz);
    return !(dot(coneNormal, normalize(u_view_direction)) < cos(cone.w));
}


void main()
{
    uint ti = gl_LocalInvocationID.x;
    uint mgi = gl_WorkGroupID.x;            // meshlet group index
    uint mi = mgi * 32 + ti;

    if (u_do_cluster_culling)
    {
        vec4 cone = vec4(meshlet_buffer.meshlets[mi].cone[0],
                         meshlet_buffer.meshlets[mi].cone[1],
                         meshlet_buffer.meshlets[mi].cone[2],
                         meshlet_buffer.meshlets[mi].cone[3]);

        bool accept = !coneCull(cone, u_view_direction, u_M_matrix);
        //bool accept = !coneCull(cone, u_camera_position, u_M_matrix);
        uvec4 ballot = subgroupBallot(accept);

	    uint index = subgroupBallotExclusiveBitCount(ballot);
	    if (accept)
		    TaskShader_Output.meshletIndices[index] = mi;

	    uint count = subgroupBallotBitCount(ballot);
	    if (ti == 0)
		    gl_TaskCountNV = count;
    }
    else
    {     
        TaskShader_Output.meshletIndices[ti] = mi;

        if (ti == 0)
            gl_TaskCountNV = 32;
    }
}
