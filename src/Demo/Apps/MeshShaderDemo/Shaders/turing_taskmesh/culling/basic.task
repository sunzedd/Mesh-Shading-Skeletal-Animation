#version 450
#extension GL_NV_mesh_shader : require
#extension GL_ARB_separate_shader_objects : require
#extension GL_NV_gpu_shader5 : enable

#define THREAD_COUNT 32

layout(local_size_x=THREAD_COUNT, local_size_y=1, local_size_z=1) in;


taskNV out Task 
{
    uint meshletIndices[32];
} TaskShader_Output;


struct Meshlet
{
    float cone[4];
    uint32_t vertices[64];      
    uint8_t indices[126 * 3];
    uint8_t triangleCount;
    uint8_t vertexCount;
};

uniform u_view_direction in vec3;
uniform u_M_matrix in mat4;

layout(binding = 1, shared) readonly buffer meshlets_ssbo
{
	Meshlet meshlets[];
} meshlet_buffer;


bool coneCull(vec4 cone, vec3 viewDir)
{
    return dot(cone.xyz, view) > cone.w;
}


void main()
{
    uint mgi = gl_WorkGroupID.x;            // meshlet group index
    uint ti = gl_LocalInvocationID.x;
    uint mi = mgi + 32 * ti;

    /*
    if (coneCull(meshlets_buffer[mi].cone, u_view_direction))
    {
        
    }
    */

    TaskShader_Output.meshletIndices[ti] = mi;

    if (ti == 0)
        gl_TaskCountNV = 32;
}

