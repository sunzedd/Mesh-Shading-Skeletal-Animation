#version 450
#extension GL_NV_mesh_shader : require
#extension GL_ARB_separate_shader_objects : require
#extension GL_NV_gpu_shader5 : enable


#define THREAD_COUNT 32


layout(local_size_x=THREAD_COUNT, local_size_y=1, local_size_z=1) in;
layout(triangles, max_vertices=64, max_primitives=126) out;

// ----------------------- Input data from Task shader ---------------
taskNV in Task 
{
    uint meshletIndices[32];
} TaskShader_Output;


// -------------------Output data ----------------------------
out gl_PerVertex
{
    vec4 gl_Position;
} gl_stupid;

out gl_MeshPerVertexNV 
{
     vec4 gl_Position;
} gl_MeshVerticesNV[];

out uint gl_PrimitiveCountNV;
out uint gl_PrimitiveIndicesNV[];

layout(location=0) out MeshShader_Output 
{
    vec3 meshletColor;
    vec3 normal;
} perVertexOutput[64];


// --------------------- Structures ------------------------------
struct Vertex
{
    float x, y, z;
    float nx, ny, nz;
    int boneIds[4];
    float boneWeights[4];
};

struct Meshlet
{
    uint32_t classID;
    float cone[4];
    uint32_t vertices[64];      
    uint8_t indices[126 * 3];
    uint8_t triangleCount;
    uint8_t vertexCount;
};


// --------------------- SSBO buffers -----------------------------
layout(binding = 0, shared) readonly buffer vertices_ssbo
{
    Vertex vertices[];
} vertex_buffer;

layout(binding = 1, shared) readonly buffer meshlets_ssbo
{
	Meshlet meshlets[];
} meshlet_buffer;


// --------------------- Uniforms ---------------------------------
uniform mat4 u_M_matrix;
uniform mat4 u_MVP_matrix;
uniform uint u_meshlet_index;
uniform mat4 u_bone_transforms[50];

uint calculate_meshlet_hash(uint a)
{
   a = (a+0x7ed55d16) + (a<<12);
   a = (a^0xc761c23c) ^ (a>>19);
   a = (a+0x165667b1) + (a<<5);
   a = (a+0xd3a2646c) ^ (a<<9);
   a = (a+0xfd7046c5) + (a<<3);
   a = (a^0xb55a4f09) ^ (a>>16);
   return a;
}

vec3 calculate_meshlet_color(uint meshlet_index)
{
    uint hash = calculate_meshlet_hash(meshlet_index);
    vec3 color = vec3(float(hash & 255), float((hash >> 8) & 255), float((hash >> 16) & 255)) / 255.0;
    return color;
}

mat4 CalculateSkinTransformationMatrix(uint meshlet_index, uint vertex_index)
{
    Vertex v = vertex_buffer.vertices[meshlet_buffer.meshlets[meshlet_index].vertices[vertex_index]];

    mat4 transform = mat4(0);
    for (int i = 0; i < 4; i++)
    {
        uint boneId = v.boneIds[i];
        float boneWeight = v.boneWeights[i];
        transform += u_bone_transforms[boneId] * boneWeight;
    }
    return transform;
}


void main()
{
    uint mi = TaskShader_Output.meshletIndices[gl_WorkGroupID.x];               // meshlet index
    uint ti = uint(gl_LocalInvocationID.x);                                          // thread index

    vec3 meshlet_color = calculate_meshlet_color(mi);

    // process vertex
    for (uint i = ti; i < uint8_t(meshlet_buffer.meshlets[mi].vertexCount); i += THREAD_COUNT)
    {
        mat4 skinned_transform = CalculateSkinTransformationMatrix(mi, i);

        float x = vertex_buffer.vertices[meshlet_buffer.meshlets[mi].vertices[i]].x;
        float y = vertex_buffer.vertices[meshlet_buffer.meshlets[mi].vertices[i]].y;
        float z = vertex_buffer.vertices[meshlet_buffer.meshlets[mi].vertices[i]].z;
        vec4 position = vec4(x, y, z, 1.0);

        vec4 skinned_position = skinned_transform * position;
        skinned_position = u_MVP_matrix * skinned_position;

        float nx = vertex_buffer.vertices[meshlet_buffer.meshlets[mi].vertices[i]].nx;
        float ny = vertex_buffer.vertices[meshlet_buffer.meshlets[mi].vertices[i]].ny;
        float nz = vertex_buffer.vertices[meshlet_buffer.meshlets[mi].vertices[i]].nz;
        vec3 normal = vec3(nx, ny, nz);

        gl_MeshVerticesNV[i].gl_Position = skinned_position;

        perVertexOutput[i].normal = mat3(transpose(inverse(u_M_matrix * skinned_transform))) * normal;
        perVertexOutput[i].normal = normalize(perVertexOutput[i].normal);
        perVertexOutput[i].meshletColor = meshlet_color;
    }

    // process indices
    for (uint i = ti; i < uint(meshlet_buffer.meshlets[mi].triangleCount) * 3; i += THREAD_COUNT)
    {
        gl_PrimitiveIndicesNV[i] = meshlet_buffer.meshlets[mi].indices[i];
    }

    if (ti == 0)
    {
        gl_PrimitiveCountNV = meshlet_buffer.meshlets[mi].triangleCount;
    }
}

